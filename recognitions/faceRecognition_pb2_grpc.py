# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import faceRecognition_pb2 as faceRecognition__pb2


class RecognitionsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.recognise = channel.unary_unary(
                '/numproto.protobuf.Recognitions/recognise',
                request_serializer=faceRecognition__pb2.recognitionInit.SerializeToString,
                response_deserializer=faceRecognition__pb2.Empty.FromString,
                )
        self.processImage = channel.unary_unary(
                '/numproto.protobuf.Recognitions/processImage',
                request_serializer=faceRecognition__pb2.FaceRecognitionProcess.SerializeToString,
                response_deserializer=faceRecognition__pb2.Empty.FromString,
                )
        self.detectFace = channel.unary_unary(
                '/numproto.protobuf.Recognitions/detectFace',
                request_serializer=faceRecognition__pb2.FaceRecognitionProcess.SerializeToString,
                response_deserializer=faceRecognition__pb2.FaceDetectionResponse.FromString,
                )
        self.getFaceID1 = channel.unary_unary(
                '/numproto.protobuf.Recognitions/getFaceID1',
                request_serializer=faceRecognition__pb2.FaceRecognitionProcess.SerializeToString,
                response_deserializer=faceRecognition__pb2.FaceIDResponse.FromString,
                )
        self.addFace = channel.unary_unary(
                '/numproto.protobuf.Recognitions/addFace',
                request_serializer=faceRecognition__pb2.Empty.SerializeToString,
                response_deserializer=faceRecognition__pb2.Empty.FromString,
                )
        self.trainRecognizer = channel.unary_unary(
                '/numproto.protobuf.Recognitions/trainRecognizer',
                request_serializer=faceRecognition__pb2.Empty.SerializeToString,
                response_deserializer=faceRecognition__pb2.Empty.FromString,
                )


class RecognitionsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def recognise(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def processImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def detectFace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFaceID1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addFace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def trainRecognizer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecognitionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'recognise': grpc.unary_unary_rpc_method_handler(
                    servicer.recognise,
                    request_deserializer=faceRecognition__pb2.recognitionInit.FromString,
                    response_serializer=faceRecognition__pb2.Empty.SerializeToString,
            ),
            'processImage': grpc.unary_unary_rpc_method_handler(
                    servicer.processImage,
                    request_deserializer=faceRecognition__pb2.FaceRecognitionProcess.FromString,
                    response_serializer=faceRecognition__pb2.Empty.SerializeToString,
            ),
            'detectFace': grpc.unary_unary_rpc_method_handler(
                    servicer.detectFace,
                    request_deserializer=faceRecognition__pb2.FaceRecognitionProcess.FromString,
                    response_serializer=faceRecognition__pb2.FaceDetectionResponse.SerializeToString,
            ),
            'getFaceID1': grpc.unary_unary_rpc_method_handler(
                    servicer.getFaceID1,
                    request_deserializer=faceRecognition__pb2.FaceRecognitionProcess.FromString,
                    response_serializer=faceRecognition__pb2.FaceIDResponse.SerializeToString,
            ),
            'addFace': grpc.unary_unary_rpc_method_handler(
                    servicer.addFace,
                    request_deserializer=faceRecognition__pb2.Empty.FromString,
                    response_serializer=faceRecognition__pb2.Empty.SerializeToString,
            ),
            'trainRecognizer': grpc.unary_unary_rpc_method_handler(
                    servicer.trainRecognizer,
                    request_deserializer=faceRecognition__pb2.Empty.FromString,
                    response_serializer=faceRecognition__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'numproto.protobuf.Recognitions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Recognitions(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def recognise(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/numproto.protobuf.Recognitions/recognise',
            faceRecognition__pb2.recognitionInit.SerializeToString,
            faceRecognition__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def processImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/numproto.protobuf.Recognitions/processImage',
            faceRecognition__pb2.FaceRecognitionProcess.SerializeToString,
            faceRecognition__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def detectFace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/numproto.protobuf.Recognitions/detectFace',
            faceRecognition__pb2.FaceRecognitionProcess.SerializeToString,
            faceRecognition__pb2.FaceDetectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFaceID1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/numproto.protobuf.Recognitions/getFaceID1',
            faceRecognition__pb2.FaceRecognitionProcess.SerializeToString,
            faceRecognition__pb2.FaceIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addFace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/numproto.protobuf.Recognitions/addFace',
            faceRecognition__pb2.Empty.SerializeToString,
            faceRecognition__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def trainRecognizer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/numproto.protobuf.Recognitions/trainRecognizer',
            faceRecognition__pb2.Empty.SerializeToString,
            faceRecognition__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
